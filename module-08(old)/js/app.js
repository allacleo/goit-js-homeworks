// –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫, –Ω–∞—á–Ω–µ–º —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∑–∞–º–µ—Ç–æ–∫. –•–æ—Ä–æ—à–∞—è –Ω–æ–≤–æ—Å—Ç—å - –≤–µ—Ä—Å—Ç–∫–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∞, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–æ–ª—å–∫–æ –Ω–∞–ø–∏—Å–∞—Ç—å JS-–∫–æ–¥. üéâ

// –ò—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ—Ç–æ–≤–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —ç—Ç–æ–π –≤–µ—Ç–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.

// –ü–µ—Ä–µ–Ω–µ—Å–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å Notepad, —Å–¥–µ–ª–∞–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–µ—Ä–µ–¥–∞–≤ –µ–º—É –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –≥–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫.
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é createListItem(note) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ ul.note-list c –∫–∞—Ä—Ç–æ—á–∫–æ–π –∑–∞–º–µ—Ç–∫–∏. –°–æ–∑–¥–∞–≤–∞–π DOM-—É–∑–ª—ã —Å –ø–æ–º–æ—â—å—é document.createElement.
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é renderNoteList(listRef, notes), –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ DOM-—É–∑–µ–ª —Å–ø–∏—Å–∫–∞ ul.note-list –∏ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞–º–µ—Ç–æ–∫, –≤—ã–∑—ã–≤–∞–µ—Ç createListItem(note) —Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑, —Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å–ø–∏—Å–æ–∫.
// –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–∏–¥.

// –ò—Å–ø–æ–ª—å–∑—É–π –∫–∞—Ä—Ç—ã –∏–º–µ–Ω –∏–∫–æ–Ω–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç.
// –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ data-–∞—Ç—Ä–∏–±—É—Ç data-id —É —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞, —Ç—É–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–º–µ—Ç–∫–∏, —ç—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö.
// –†–∞–∑–º–µ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–≤–æ–ª—å–Ω–æ –±–æ–ª—å—à–∞—è, –ø–æ—ç—Ç–æ–º—É –µ—Å—Ç—å —Å–º—ã—Å–ª –Ω–µ –ø–∏—Å–∞—Ç—å –≤—Å–µ –≤ –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ createListItem (–±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç—ã–Ω—è –∫–æ–¥–∞), –∞ –≤—ã–Ω–µ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–∞—Å—Ç–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Ö –≤ createListItem, –∫ –ø—Ä–∏–º–µ—Ä—É:

// –î–ª—è div.note__content –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é createNoteContent.
// –î–ª—è footer.note__footer –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é createNoteFooter.
// –¢–∞–∫ –∫–∞–∫ button.action –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –º–Ω–æ–≥–æ —Ä–∞–∑, –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é createActionButton.

'use strict';

const PRIORITY_TYPES = {
  LOW: 0,
  NORMAL: 1,
  HIGH: 2,
};

const ICON_TYPES = {
  EDIT: 'edit',
  DELETE: 'delete',
  ARROW_DOWN: 'expand_more',
  ARROW_UP: 'expand_less',
};

const NOTE_ACTIONS = {
  DELETE: 'delete-note',
  EDIT: 'edit-note',
  INCREASE_PRIORITY: 'increase-priority',
  DECREASE_PRIORITY: 'decrease-priority',
};

const initialNotes = [
  {
    id: 'id-1',
    title: 'JavaScript essentials',
    body:
      'Get comfortable with all basic JavaScript concepts: variables, loops, arrays, branching, objects, functions, scopes, prototypes etc',
    priority: PRIORITY_TYPES.HIGH,
  },
  {
    id: 'id-2',
    title: 'Refresh HTML and CSS',
    body:
      'Need to refresh HTML and CSS concepts, after learning some JavaScript. Maybe get to know CSS Grid and PostCSS, they seem to be trending.',
    priority: PRIORITY_TYPES.NORMAL,
  },
  {
    id: 'id-3',
    title: 'Get comfy with Frontend frameworks',
    body:
      'First should get some general knowledge about frameworks, then maybe try each one for a week or so. Need to choose between React, Vue and Angular, by reading articles and watching videos.',
    priority: PRIORITY_TYPES.NORMAL,
  },
  {
    id: 'id-4',
    title: 'Winter clothes',
    body:
      "Winter is coming! Need some really warm clothes: shoes, sweater, hat, jacket, scarf etc. Maybe should get a set of sportwear as well so I'll be able to do some excercises in the park.",
    priority: PRIORITY_TYPES.LOW,
  },
];

class Notepad {
    constructor(notes = []) {
    this._notes = notes;
    }

get notes() {
    return this._notes;
}

findNoteById = function(id) {
    for (const note of this._notes) {
      if (note.id === id) {
        return note;
      }
    }
  }
  
  saveNote = function(note) {
    this._notes.push(note);
    return note;
  };
  
  deleteNote = function(id) {
  for (let i = 0; i < this._notes.length; i += 1) {
    if (this._notes.splice(i, 1));
  }
  };
  
  updateNoteContent = function(id, updatedContent) {
    return Object.assign(this.findNoteById(id), updatedContent);
  }
  
  updateNotePriority = function(id) {
    for (const note of this._notes) {
      if (note.id === id) {
        note.priority = Notepad.Priority;
        return note;
      }
    }
  }
  
  filterNotesByQuery = function(query) {
  //     /*
  //      * –§–∏–ª—å—Ç—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ query.
  //      * –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ query –µ—Å—Ç—å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏–ª–∏ —Ç–µ–ª–µ –∑–∞–º–µ—Ç–∫–∏ - –æ–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç
  //      *
  //      * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç: –ø–æ–¥—Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ title –∏ body –∑–∞–º–µ—Ç–∫–∏
  //      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∑–∞–º–µ—Ç–æ–∫, –∫–æ–Ω—Ç–µ–Ω—Ç –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É
  //      */
  const notesWithQuery = [];
  
  for (const note of this._notes) {
    if (note.title.toLowerCase().includes(query) || note.body.toLowerCase().includes(query)) {
    notesWithQuery.push(note);
        }
    }
   return notesWithQuery;
  }
  
  filterNotesByPriority = function(priority) {
  //     /*
  //      * –§–∏–ª—å—Ç—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  //      * –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ priority —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∑–∞–º–µ—Ç–∫–∏ - –æ–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç
  //      *
  //      * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Å–≤–æ–π—Å—Ç–≤–µ priority –∑–∞–º–µ—Ç–∫–∏
  //      * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∑–∞–º–µ—Ç–æ–∫ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
  //      */
      const prioritized = [];
      for (const note of this._notes) {
        if (note.priority === priority) {
          prioritized.push(note);
        }
      }
      return prioritized;
    }
    static getPriorityName(priorityId) {
        return Notepad.PRIORITIES[priorityId].name;
      }
  };

  Notepad.PRIORITIES = {
    0: { id: 0, value: 0, name: 'Low' },
    1: { id: 1, value: 1, name: 'Normal' },
    2: { id: 2, value: 2, name: 'High' },
  };

  const notepad = new Notepad(initialNotes);

console.log(notepad.notes);

const refs = {
  noteList: document.querySelector('.note-list'),
};

const createNoteContent = (title, body) => {
  const div = document.createElement('div');
  div.classList = 'note__content';

  const titleText = document.createElement('h2');
  titleText.classList = 'note__title';
  titleText.textContent = title;

  const bodyText = document.createElement('p');
  bodyText.classList = 'note__body';
  bodyText.textContent = body;

  div.append(titleText, bodyText);

  return div;
};

const createNoteFooter = priority => {
  const footer = document.createElement('footer');
  footer.classList = 'note__footer';

  const firstSection = document.createElement('section');
  firstSection.classList = 'note__section';

  const secondSection = document.createElement('section');
  secondSection.classList = 'note__section';

  const spanPriority = document.createElement('span');
  spanPriority.classList = 'note__priority';
  spanPriority.textContent = `Priority: ${Notepad.getPriorityName(priority)}`;

  firstSection.append(
    createActionButton(NOTE_ACTIONS.DECREASE_PRIORITY, ICON_TYPES.ARROW_DOWN),
    createActionButton(NOTE_ACTIONS.INCREASE_PRIORITY, ICON_TYPES.ARROW_UP),
    spanPriority
  );
  secondSection.append(
    createActionButton(NOTE_ACTIONS.EDIT, ICON_TYPES.EDIT),
    createActionButton(NOTE_ACTIONS.DELETE, ICON_TYPES.DELETE)
  );
  footer.append(firstSection, secondSection);

  return footer;
};

const createActionButton = (action, text) => {
  const button = document.createElement('button');
  button.classList = 'action';
  button.dataset.action = action;

  const i = document.createElement('i');
  i.classList.add('material-icons');
  i.classList.add('action__icon');
  i.textContent = text;

  button.appendChild(i);

  return button;
};

const createListItem = ({ id, title, body, priority }) => {
  const listItem = document.createElement('li');
  listItem.classList = 'note-list__item';
  listItem.dataset.id = id;

  const div = document.createElement('div');
  div.classList = 'note';

  div.append(createNoteContent(title, body), createNoteFooter(priority));
  listItem.appendChild(div);

  return listItem;
};

const renderNoteList = (listRef, notes) => {
  const listItems = notes.map(item => createListItem(item));

  listRef.innerHTML = '';
  listRef.append(...listItems);
};

renderNoteList(refs.noteList, initialNotes);


  